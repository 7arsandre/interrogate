{"version":3,"sources":["assets/images/kahoot_messenger.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","App","useState","kahootQuestions","setKahootQuestions","className","src","logo","alt","htmlFor","id","type","onChange","event","file","target","files","reader","FileReader","onload","e","contents","result","fetch","method","headers","body","JSON","stringify","data","then","response","json","window","document","getElementById","click","catch","error","console","readAsText","filename","element","name","label","value","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,8C,8SCMrCC,EAAYC,IAAYD,UACxBE,EAAaD,IAAYD,UAAUE,WACnCC,EAAcF,IAAYD,UAAUG,YAoE3BC,MAlEf,WAAgB,IAAD,EAEmCC,oBAAS,GAF5C,mBAELC,EAFK,KAEYC,EAFZ,KAmCX,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACvC,yBAAKH,UAAU,yBACjB,2BAAOI,QAAQ,cAAcJ,UAAU,sBACvC,uBAAGA,UAAU,uBADb,yCAIE,yBAAKA,UAAU,yBACb,2BAAOK,GAAG,cAAcC,KAAK,OAAOC,SAzCvB,SAACC,GACxB,IAAMC,EAAOD,EAAME,OAAOC,MAAM,GAE1BC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAASC,GACvB,IAAMC,EAAWD,EAAEL,OAAOO,OAG1BC,MAAM,kCAAmC,CACvCC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAW,CACpBC,KAAMR,MAGTS,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GACL5B,EAAmB4B,GACnBC,OAAOC,SAASC,eAAe,kBAAkBC,WAElDC,OAAM,SAACC,GACNC,QAAQD,MAAMA,OAIlBrB,EAAOuB,WAAW1B,OAeTX,GACC,kBAACN,EAAD,CAAY4C,SAAU,aAAcC,QAAS,yBAAKhC,GAAG,oBACnD,kBAACX,EAAD,CAAY8B,KAAM1B,EAAiBwC,KAAK,gBACtC,kBAAC3C,EAAD,CAAa4C,MAAM,gCAAgCC,MAAM,aACzD,kBAAC7C,EAAD,CAAa4C,MAAM,+BAA+BC,MAAM,YACxD,kBAAC7C,EAAD,CAAa4C,MAAM,+BAA+BC,MAAM,YACxD,kBAAC7C,EAAD,CAAa4C,MAAM,+BAA+BC,MAAM,YACxD,kBAAC7C,EAAD,CAAa4C,MAAM,+BAA+BC,MAAM,YACxD,kBAAC7C,EAAD,CAAa4C,MAAM,kEAA6DC,MAAM,SACtF,kBAAC7C,EAAD,CAAa4C,MAAM,0CAA0CC,MAAM,iBCtDjEC,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASC,eAAe,SDyHpB,kBAAmBkB,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdpB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMoB,c","file":"static/js/main.3c81a0e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kahoot_messenger.eb2b8205.png\";","import React, { useState} from 'react';\nimport logo from './assets/images/kahoot_messenger.png'\nimport './App.css';\n\nimport ReactExport from \"react-export-excel\";\n\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\nfunction App() {\n\n  const [ kahootQuestions, setKahootQuestions ] = useState(false)\n\n  const handleUploadFile = (event) =>{\n    const file = event.target.files[0]\n\n    const reader = new FileReader();\n    reader.onload = function(e) {\n      const contents = e.target.result;\n\n\n      fetch('http://0.0.0.0:8000/interrogate', {\n        method: 'POST',\n        headers: {\n          'accept': 'application/json',\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify(({\n          data: contents\n        }))\n      })\n      .then((response) => response.json())\n      .then((json) => {\n        setKahootQuestions(json)\n        window.document.getElementById('downloadButton').click()\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n\n    };\n    reader.readAsText(file);\n  }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <div className=\"container-file-upload\">\n          <label htmlFor=\"file-upload\" className=\"custom-file-upload\">\n          <i className=\"fa fa-cloud-upload\"></i> Click here to upload Messenger data\n          </label>\n            </div>\n            <div className=\"container-file-upload\">\n              <input id=\"file-upload\" type=\"file\" onChange={handleUploadFile}/>\n            </div>\n            {kahootQuestions &&\n              <ExcelFile  filename={\"KahootQuiz\"} element={<div id='downloadButton'></div>}>\n                <ExcelSheet data={kahootQuestions} name=\"Organization\">\n                  <ExcelColumn label=\"Question - max 120 characters\" value=\"question\"/>\n                  <ExcelColumn label=\"Answer 1 - max 75 characters\" value=\"answer1\"/>\n                  <ExcelColumn label=\"Answer 2 - max 75 characters\" value=\"answer2\"/>\n                  <ExcelColumn label=\"Answer 3 - max 75 characters\" value=\"answer3\"/>\n                  <ExcelColumn label=\"Answer 4 - max 75 characters\" value=\"answer4\"/>\n                  <ExcelColumn label=\"Time limit (sec) â€“ 5, 10, 20, 30, 60, 90, 120, or 240 secs\" value=\"time\"/>\n                  <ExcelColumn label=\"Correct answer(s) - choose at least one\" value=\"correct\"/>\n                </ExcelSheet>\n              </ExcelFile>\n        }\n        </header>\n      </div>\n    );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}